dep 'dotfiles', :git_repo do
  requires 'grc.managed'
  requires 'coreutils.managed'
  requires 'dotfiles installed'.with(:git_repo => git_repo)
  requires 'zsh'
end

meta :dotfile do
  accepts_value_for :configs
  accepts_value_for :chmod

  def source
    "~/.dotfiles".p.glob("**/#{basename}.erb").first
  end

  def target
    "~/.#{basename}"
  end

  template {
    met? {
      source && Babushka::Renderable.new(target).from?(source)
    }
    meet {
      if source && source.p.exists?
        if chmod
          render_erb source, :to => target, :perms => chmod
        else
          render_erb source, :to => target
        end
      else
        log_error "Could not find #{basename}.erb template in ~/.dotfiles"
      end
    }
  }
end

dep 'dotfiles installed', :git_repo do
  requires 'dotfiles.cloned'.with(:git_repo => git_repo)
  requires 'dotfiles symlinked'
  requires 'gitconfig.dotfile'
end

dep 'dotfiles.cloned', :git_repo do
  git_repo.ask("Enter dotfiles repo location").default("git://github.com/sporkd/dotfiles.git")
  repo git_repo
  destination '~/.dotfiles'
end

dep 'gitconfig.dotfile', :full_name, :email do
  full_name.ask("Your full name (for gitconfig)")
  email.ask("Your email (for gitconfig)")
  configs({
    :full_name => full_name,
    :email => email
  })
end

dep 'dotfiles symlinked' do
  def symlink_paths
    "~/.dotfiles".p.glob("/*/**{.symlink}")
  end

  def basename_without_ext(path)
    parts = path.p.basename.to_s.split('.')
    parts.pop
    parts.join('.')
  end

  met? {
    symlinks = symlink_paths.collect do |path|
      filename = basename_without_ext(path)
      target = "~/.#{filename}"
      target.p.exists? && target.p.symlink?
    end
    symlinks.empty? || (symlinks.uniq == [true])
  }

  meet {
    symlink_paths.each do |path|
      filename = basename_without_ext(path)
      target = "~/.#{filename}"
      if target.p.exists? && !target.p.symlink?
        target.p.rename "#{target}.backup".p
      end
      shell "ln -sf '#{path.p}' '#{target.p}'"
    end
  }
end

dep 'dotfiles uninstalled' do
  def dotfile_paths
    "~/.dotfiles".p.glob("*/**{.symlink,.erb}")
  end

  def installed?(path)
    path.symlink? || (path.file? && !path.grep(/Generated by babushka/).nil?)
  end

  def basename_without_ext(path)
    parts = path.p.basename.to_s.split('.')
    parts.pop
    parts.join('.')
  end

  met? {
    dotfiles = dotfile_paths.collect do |path|
      filename = basename_without_ext(path)
      target = "~/.#{filename}"
      installed?(target.p)
    end
    dotfiles.empty? || (dotfiles.uniq == [false])
  }

  meet {
    dotfile_paths.each do |path|
      filename = basename_without_ext(path)
      target = "~/.#{filename}"
      target.p.remove if installed?(target.p)
      if "~/.#{filename}.backup".p.exists?
        "~/.#{filename}.backup".p.rename target.p
      end
    end
  }
end
